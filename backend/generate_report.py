'''
from docx import Document
from docx.shared import Pt
import mysql.connector
import sys
import os
import io
from PIL import Image

def fetch_image_data(file_path, max_width=400):
    try:
        with open(file_path, 'rb') as f:
            image = Image.open(f)
            # Resize the image while preserving the aspect ratio
            width_percent = (max_width / float(image.size[0]))
            new_height = int((float(image.size[1]) * float(width_percent)))
            resized_image = image.resize((max_width, new_height), Image.BICUBIC)
            
            image_data = io.BytesIO()
            resized_image.save(image_data, format='PNG')  # Adjust the format as needed
            base64_image_data = image_data.getvalue()
            return base64_image_data
    except Exception as e:
        print('Error fetching image data:', e)
        return None

def fetch_data_from_db(project_name):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )

    cursor = connection.cursor()

    # Fetch data from the findings table for the specified project name
    cursor.execute("SELECT f.protocol, f.detection_name, f.file_path, p.start_date, p.end_date "
                   "FROM findings f "
                   "JOIN project p ON f.prj_name = p.project_name "
                   "WHERE f.prj_name = %s", (project_name,))
    data = cursor.fetchall()

    # Close the cursor and connection
    cursor.close()
    connection.close()

    return data

def generate_word_report(data, project_name, project_owner, start_date, end_date):
    # Load the Word template
    template_path = "template.docx"  # Update with your template path
    document = Document(template_path)

    # Replace placeholders with project information
    placeholders = {
        "PROJECT_NAME": project_name,
        "PROJECT_OWNER": project_owner,
        "START_DATE": start_date,
        "END_DATE": end_date
    }
    for key, value in placeholders.items():
        replace_text(document, key, value)


    # Group data by detection name
    grouped_data = {}
    for protocol, detection_name, file_path, _, _ in data:
        key = (detection_name, protocol)
        if key not in grouped_data:
            grouped_data[key] = []
        grouped_data[key].append(file_path)

    # Add data to the document
    for (detection_name, protocol), file_paths in grouped_data.items():
        document.add_heading(f"Detection Name: {detection_name} - Protocol: {protocol}", level=2)
        document.add_paragraph("")
        document.add_paragraph("Evidence")
        
        for file_path in file_paths:
            image_data = fetch_image_data(file_path)
            if image_data:
                document.add_picture(io.BytesIO(image_data))

    # Save the document with the project name as filename in Reports directory
    if not os.path.exists("Reports"):
        os.makedirs("Reports")
    file_name = os.path.join("Reports", f"{project_name}_report.docx")
    document.save(file_name)

    # Add report details to the database
    add_report_to_db(project_name, file_name)

    return file_name

def replace_text(document, old_text, new_text):
    for p in document.paragraphs:
        if old_text in p.text:
            for run in p.runs:
                run.text = run.text.replace(old_text, new_text)
    for table in document.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    if old_text in paragraph.text:
                        for run in paragraph.runs:
                            run.text = run.text.replace(old_text, new_text)

def add_report_to_db(project_name, file_path):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )

    cursor = connection.cursor()

    # Check if the report_name already exists for the given project_name
    cursor.execute("SELECT * FROM reports WHERE project_name = %s AND report_name = %s",
                   (project_name, os.path.basename(file_path)))
    existing_report = cursor.fetchone()
    if existing_report:
        print("Report already exists for this project.")
        return

    # Insert report details into the reports table
    cursor.execute("INSERT INTO reports (project_name, report_name, report_path) VALUES (%s, %s, %s)",
                   (project_name, os.path.basename(file_path), file_path))
    
    # Commit changes and close connection
    connection.commit()
    connection.close()

if __name__ == "__main__":
    # Fetch project name from command-line arguments
    project_name = sys.argv[1]

    # Fetch data from the database for the specified project name
    data = fetch_data_from_db(project_name)

    # Fetch project owner, start date, and end date from the database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )
    cursor = connection.cursor()
    cursor.execute("SELECT project_owner, start_date, end_date FROM project WHERE project_name = %s", (project_name,))
    project_owner, start_date, end_date = cursor.fetchone()

    # Generate Word report with the fetched data
    generated_report = generate_word_report(data, project_name, project_owner, start_date, end_date)
    print(f"Report generated successfully: {generated_report}")
'''

from docx import Document
from docx.shared import Pt
import mysql.connector
import sys
import os
import io
from PIL import Image

def fetch_image_data(file_path, max_width=400):
    try:
        with open(file_path, 'rb') as f:
            image = Image.open(f)
            # Resize the image while preserving the aspect ratio
            width_percent = (max_width / float(image.size[0]))
            new_height = int((float(image.size[1]) * float(width_percent)))
            resized_image = image.resize((max_width, new_height), Image.BICUBIC)
            
            image_data = io.BytesIO()
            resized_image.save(image_data, format='PNG')  # Adjust the format as needed
            base64_image_data = image_data.getvalue()
            return base64_image_data
    except Exception as e:
        print('Error fetching image data:', e)
        return None

def fetch_data_from_db(project_name):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )

    cursor = connection.cursor()

    # Fetch data from the findings table for the specified project name
    cursor.execute("SELECT f.protocol, f.detection_name, f.file_path,f.description, f.remediation, f.impact, p.start_date, p.end_date "
                   "FROM findings f "
                   "JOIN project p ON f.prj_name = p.project_name "
                   "WHERE f.prj_name = %s", (project_name,))
    data = cursor.fetchall()

    # Close the cursor and connection
    cursor.close()
    connection.close()

    return data

def generate_word_report(data, project_name, project_owner, start_date, end_date):
    # Load the Word template
    template_path = "template.docx"  # Update with your template path
    document = Document(template_path)

    # Replace placeholders with project information
    placeholders = {
        "PROJECT_NAME": project_name,
        "PROJECT_OWNER": project_owner,
        "START_DATE": start_date,
        "END_DATE": end_date
    }
    for key, value in placeholders.items():
        replace_text(document, key, value)

    # Group data by detection name
    grouped_data = {}
    for protocol, detection_name, file_path,description, remediation, impact, _, _ in data:
        key = (detection_name, protocol)
        if key not in grouped_data:
            grouped_data[key] = {'file_paths': [],'description':description, 'remediation': remediation, 'impact': impact}
        grouped_data[key]['file_paths'].append(file_path)

    # Add data to the document
    for (detection_name, protocol), detection_data in grouped_data.items():
        document.add_heading(detection_name, level=2)
        document.add_paragraph("").bold = True  # Make empty line bold
        rating_paragraph = document.add_paragraph()
        rating_paragraph.add_run("Rating: ").bold = True
        cvss_paragraph = document.add_paragraph()
        cvss_paragraph.add_run("CVSS: ").bold = True
        description_paragraph = document.add_paragraph()
        description_paragraph.add_run("Description: ").bold = True  # Make "Description" bold
        description_paragraph.add_run(detection_data['description'])#Add description data
        impact_paragraph = document.add_paragraph()
        impact_paragraph.add_run("Impact: ").bold = True  # Make "Impact:" bold
        impact_paragraph.add_run(detection_data['impact'])  # Add impact data
        remediation_paragraph = document.add_paragraph()
        remediation_paragraph.add_run("Remediation: ").bold = True  # Make "Remediation:" bold
        remediation_paragraph.add_run(detection_data['remediation'])  # Add remediation data
        evidence_paragraph = document.add_paragraph()
        evidence_paragraph.add_run("Evidence: ").bold = True

        
        for file_path in detection_data['file_paths']:
            image_data = fetch_image_data(file_path)
            if image_data:
                document.add_picture(io.BytesIO(image_data))

    # Save the document with the project name as filename in Reports directory
    if not os.path.exists("Reports"):
        os.makedirs("Reports")
    file_name = os.path.join("Reports", f"{project_name}_report.docx")
    document.save(file_name)

    # Add report details to the database
    add_report_to_db(project_name, file_name)

    return file_name


def replace_text(document, old_text, new_text):
    for p in document.paragraphs:
        if old_text in p.text:
            for run in p.runs:
                run.text = run.text.replace(old_text, new_text)
    for table in document.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    if old_text in paragraph.text:
                        for run in paragraph.runs:
                            run.text = run.text.replace(old_text, new_text)

def add_report_to_db(project_name, file_path):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )

    cursor = connection.cursor()

    # Check if the report_name already exists for the given project_name
    cursor.execute("SELECT * FROM reports WHERE project_name = %s AND report_name = %s",
                   (project_name, os.path.basename(file_path)))
    existing_report = cursor.fetchone()
    if existing_report:
        print("Report already exists for this project.")
        return

    # Insert report details into the reports table
    cursor.execute("INSERT INTO reports (project_name, report_name, report_path) VALUES (%s, %s, %s)",
                   (project_name, os.path.basename(file_path), file_path))
    
    # Commit changes and close connection
    connection.commit()
    connection.close()

if __name__ == "__main__":
    # Fetch project name from command-line arguments
    project_name = sys.argv[1]

    # Fetch data from the database for the specified project name
    data = fetch_data_from_db(project_name)

    # Fetch project owner, start date, and end date from the database
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="pentest_checklist"
    )
    cursor = connection.cursor()
    cursor.execute("SELECT project_owner, start_date, end_date FROM project WHERE project_name = %s", (project_name,))
    project_owner, start_date, end_date = cursor.fetchone()

    # Generate Word report with the fetched data
    generated_report = generate_word_report(data, project_name, project_owner, start_date, end_date)
    print(f"Report generated successfully: {generated_report}")

