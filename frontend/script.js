/*
// hi code 
let currentProjectName = '';

// Fetch projects and populate the project dropdown
fetch('/get-projects')
    .then(response => response.json())
    .then(data => {
        const projectsDropdown = document.getElementById('projects');
        
        // Add default option
        const defaultProjectOption = document.createElement('option');
        defaultProjectOption.value = '';
        defaultProjectOption.text = 'Select Project';
        projectsDropdown.appendChild(defaultProjectOption);
        
        // Add projects from database
        data.forEach(project => {
            const option = document.createElement('option');
            option.value = project;
            option.text = project;
            projectsDropdown.appendChild(option);
        });
    })
    .catch(error => console.error('Error fetching projects:', error));

// Function to fetch protocols based on the selected project
function fetchProtocols(projectName) {
    fetch(`/get-protocols?projectName=${projectName}`)
        .then(response => response.json())
        .then(data => {
            const protocolsDropdown = document.getElementById('protocols');
            // Clear existing options
            protocolsDropdown.innerHTML = '';
            
            // Add default option
            const defaultProtocolOption = document.createElement('option');
            defaultProtocolOption.value = '';
            defaultProtocolOption.text = 'Select Protocol';
            protocolsDropdown.appendChild(defaultProtocolOption);
            
            // Add protocols from database
            data.forEach(protocol => {
                const option = document.createElement('option');
                option.value = protocol;
                option.text = protocol;
                protocolsDropdown.appendChild(option);
            });
        })
        .catch(error => console.error('Error fetching protocols:', error));
}

// Function to fetch and display test cases based on the selected protocol
function fetchTestCases(protocol) {
    fetch(`/get-test-cases?protocol=${protocol}`)
        .then(response => response.json())
        .then(data => {
            const tableBody = document.getElementById('test-cases-body');
            // Clear existing table rows
            tableBody.innerHTML = '';
            // Add rows for each test case
            data.forEach(testCase => {
                const row = document.createElement('tr');
                const protocolCell = document.createElement('td');
                protocolCell.textContent = testCase.protocol;
                const nameCell = document.createElement('td');
                nameCell.textContent = testCase.test_case_name;
                
                // Checkbox cell
                const detectionCell = document.createElement('td');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                detectionCell.appendChild(checkbox);
                
                // File upload cell
                const uploadCell = document.createElement('td');
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.disabled = true; // Disable by default
                fileInput.setAttribute('multiple', ''); // Allow multiple file selection
                uploadCell.appendChild(fileInput);
                
                // Submit cell
                const submitCell = document.createElement('td');
                const submitButton = document.createElement('button');
                submitButton.textContent = 'Submit';
                submitButton.disabled = true; // Disable by default
                submitCell.appendChild(submitButton);
                
                // Append cells to the row
                row.appendChild(protocolCell);
                row.appendChild(nameCell);
                row.appendChild(detectionCell);
                row.appendChild(uploadCell);
                row.appendChild(submitCell);
                
                // Append row to the table body
                tableBody.appendChild(row);

                // Add event listener to the checkbox
                checkbox.addEventListener('change', () => {
                    fileInput.disabled = !checkbox.checked;
                    submitButton.disabled = !checkbox.checked;
                });

                // Add event listener to the submit button
                submitButton.addEventListener('click', () => {
                    const files = fileInput.files;
                    const testCaseName = nameCell.textContent; // Get test case name from the row
                    const protocol = protocolCell.textContent; // Get protocol name from the row

                    if (files.length === 0) {
                        //alert('Please select file(s) to upload.');
						showAlert_warning2();
                        return;
                    }

                    const formData = new FormData();
                    for (let i = 0; i < files.length; i++) {
                        formData.append('files', files[i]);
                    }

                    formData.append('protocol', protocol); // Add protocol information
                    formData.append('testCaseName', testCaseName); // Add test case name
                    formData.append('projectName', currentProjectName); // Add project name

                    // Send files to the backend
                    fetch('/upload-files', {
                        method: 'POST',
                        body: formData,
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error uploading files.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle success response from the backend
                        console.log('Files uploaded successfully:', data);
                        //alert('File Uploaded successfully');
						showAlert_success();
                    })
                    .catch(error => {
                        console.error('Error uploading files:', error);
                        //alert('File Not Uploaded');
						showAlert_warning1();
                    });
                });
            });
        })
        .catch(error => console.error('Error fetching test cases:', error));
}

function showAlert_success() {
        document.getElementById('alert_success').style.display = 'block';
        // Hide the alert after 2 seconds
        setTimeout(function() {
            document.getElementById('alert_success').style.display = 'none';
        }, 2000);
    }
	
function showAlert_warning1() {
			document.getElementById('alert_warning1').style.display = 'block';
			// Hide the alert after 2 seconds
			setTimeout(function() {
				document.getElementById('alert_warning1').style.display = 'none';
			}, 2000);
		}
function showAlert_warning2() {
			document.getElementById('alert_warning2').style.display = 'block';
			// Hide the alert after 2 seconds
			setTimeout(function() {
				document.getElementById('alert_warning2').style.display = 'none';
			}, 2000);
		}



// Event listener for project dropdown change
document.getElementById('projects').addEventListener('change', (event) => {
    currentProjectName = encodeURIComponent(event.target.value); // Encode project name
    
    // Clear protocol dropdown and test cases table
    document.getElementById('protocols').innerHTML = '';
    document.getElementById('test-cases-body').innerHTML = '';
    
    // Fetch protocols for the selected project
    fetchProtocols(currentProjectName);
});

// Event listener for protocol dropdown change
document.getElementById('protocols').addEventListener('change', (event) => {
    const selectedProtocol = event.target.value;
    fetchTestCases(selectedProtocol);
});
*/

// hi code 
let currentProjectName = '';

// Fetch projects and populate the project dropdown
fetch('/get-projects')
    .then(response => response.json())
    .then(data => {
        const projectsDropdown = document.getElementById('projects');
        
        // Add default option
        const defaultProjectOption = document.createElement('option');
        defaultProjectOption.value = '';
        defaultProjectOption.text = 'Select Project';
        projectsDropdown.appendChild(defaultProjectOption);
        
        // Add projects from database
        data.forEach(project => {
            const option = document.createElement('option');
            option.value = project;
            option.text = project;
            projectsDropdown.appendChild(option);
        });
    })
    .catch(error => console.error('Error fetching projects:', error));

// Function to fetch protocols based on the selected project
function fetchProtocols(projectName) {
    fetch(`/get-protocols?projectName=${projectName}`)
        .then(response => response.json())
        .then(data => {
            const protocolsDropdown = document.getElementById('protocols');
            // Clear existing options
            protocolsDropdown.innerHTML = '';
            
            // Add default option
            const defaultProtocolOption = document.createElement('option');
            defaultProtocolOption.value = '';
            defaultProtocolOption.text = 'Select Protocol';
            protocolsDropdown.appendChild(defaultProtocolOption);
            
            // Add protocols from database
            data.forEach(protocol => {
                const option = document.createElement('option');
                option.value = protocol;
                option.text = protocol;
                protocolsDropdown.appendChild(option);
            });
        })
        .catch(error => console.error('Error fetching protocols:', error));
}

// Function to fetch and display test cases based on the selected protocol
function fetchTestCases(protocol) {
    fetch(`/get-test-cases?protocol=${protocol}`)
        .then(response => response.json())
        .then(data => {
            const tableBody = document.getElementById('test-cases-body');
            // Clear existing table rows
            tableBody.innerHTML = '';
            // Add rows for each test case
            data.forEach(testCase => {
                const row = document.createElement('tr');
                const protocolCell = document.createElement('td');
                protocolCell.textContent = testCase.protocol;
                const nameCell = document.createElement('td');
                nameCell.textContent = testCase.test_case_name;
				
				const descriptionCell = document.createElement('td');
				descriptionCell.textContent = testCase.description;
				descriptionCell.classList.add('text-wrap','text-justify-center');

				// Impact cell
				const impactCell = document.createElement('td');
				impactCell.textContent = testCase.impact;
				impactCell.classList.add('text-wrap','text-justify-center');

				// Remediation cell
				const remediationCell = document.createElement('td');
				remediationCell.textContent = testCase.remediation;
				remediationCell.classList.add('text-wrap','text-justify-center');
                
                // Checkbox cell
                const detectionCell = document.createElement('td');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                detectionCell.appendChild(checkbox);
                
                // File upload cell
                const uploadCell = document.createElement('td');
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.disabled = true; // Disable by default
                fileInput.setAttribute('multiple', ''); // Allow multiple file selection
                uploadCell.appendChild(fileInput);
                
                // Submit cell
                const submitCell = document.createElement('td');
                const submitButton = document.createElement('button');
                submitButton.textContent = 'Submit';
                submitButton.disabled = true; // Disable by default
                submitCell.appendChild(submitButton);
                
                // Append cells to the row
                row.appendChild(protocolCell);
                row.appendChild(nameCell);
				row.appendChild(descriptionCell);
				row.appendChild(impactCell);
				row.appendChild(remediationCell);
                row.appendChild(detectionCell);
                row.appendChild(uploadCell);
                row.appendChild(submitCell);
                
                // Append row to the table body
                tableBody.appendChild(row);

                // Add event listener to the checkbox
                checkbox.addEventListener('change', () => {
                    fileInput.disabled = !checkbox.checked;
                    submitButton.disabled = !checkbox.checked;
                });

                // Add event listener to the submit button
                submitButton.addEventListener('click', () => {
                    const files = fileInput.files;
                    const testCaseName = nameCell.textContent; // Get test case name from the row
                    const protocol = protocolCell.textContent; // Get protocol name from the row
					const description = descriptionCell.textContent; // Get description from the row
					const impact = impactCell.textContent; // Get impact from the row
					const remediation = remediationCell.textContent; // Get remediation from the row

                    if (files.length === 0) {
                        //alert('Please select file(s) to upload.');
						showAlert_warning2();
                        return;
                    }

                    const formData = new FormData();
                    for (let i = 0; i < files.length; i++) {
                        formData.append('files', files[i]);
                    }

                    formData.append('protocol', protocol); // Add protocol information
                    formData.append('testCaseName', testCaseName); // Add test case name
                    formData.append('projectName', currentProjectName); // Add project name
					formData.append('description', description); // Add description
					formData.append('impact', impact); // Add impact
					formData.append('remediation', remediation); // Add remediation

                    // Send files to the backend
                    fetch('/upload-files', {
                        method: 'POST',
                        body: formData,
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error uploading files.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle success response from the backend
                        console.log('Files uploaded successfully:', data);
                        //alert('File Uploaded successfully');
						showAlert_success();
                    })
                    .catch(error => {
                        console.error('Error uploading files:', error);
                        //alert('File Not Uploaded');
						showAlert_warning1();
                    });
                });
            });
        })
        .catch(error => console.error('Error fetching test cases:', error));
}

function showAlert_success() {
        document.getElementById('alert_success').style.display = 'block';
        // Hide the alert after 2 seconds
        setTimeout(function() {
            document.getElementById('alert_success').style.display = 'none';
        }, 2000);
    }
	
function showAlert_warning1() {
			document.getElementById('alert_warning1').style.display = 'block';
			// Hide the alert after 2 seconds
			setTimeout(function() {
				document.getElementById('alert_warning1').style.display = 'none';
			}, 2000);
		}
function showAlert_warning2() {
			document.getElementById('alert_warning2').style.display = 'block';
			// Hide the alert after 2 seconds
			setTimeout(function() {
				document.getElementById('alert_warning2').style.display = 'none';
			}, 2000);
		}



// Event listener for project dropdown change
document.getElementById('projects').addEventListener('change', (event) => {
    currentProjectName = encodeURIComponent(event.target.value); // Encode project name
    
    // Clear protocol dropdown and test cases table
    document.getElementById('protocols').innerHTML = '';
    document.getElementById('test-cases-body').innerHTML = '';
    
    // Fetch protocols for the selected project
    fetchProtocols(currentProjectName);
});

// Event listener for protocol dropdown change
document.getElementById('protocols').addEventListener('change', (event) => {
    const selectedProtocol = event.target.value;
    fetchTestCases(selectedProtocol);
});









